
GWL - Geophysical Wavelet Library ver. 1.5

Copyright (C) 2007 Mikhail Kulesh and Matthias Holschneider

These are generic installation instructions. 

I. Basic Installation (MS-Windows)
==============================

The simplest way to install GWL is:

1. Unzip gwl1.5.zip into the folder "gwl1.5".

2. If your system is Windows 2000/XP, you do not need to do anything (all 
   precompiled modules for Win-32 OS were already added to the archive). 
   Just run certain modules from 'gwl1.5\bin' directory. 

3. You can build the program using Borland C++ 32 bit compiler, for example 
   freely downloadable BCC50. In this case, you need to download the Argtable2 
   Library before, which is an ANSI C command line parser. We recommend 
   Argtable2 version 2.6, released on February 12, 2006. Please download the 
   Argtable2 source code 'argtable2-6.tar.gz' from 
      http://argtable.sourceforge.net
   to the directory 'gwl1.5\source' and unzip to the directory 
   'gwl1.5\source\argtable2-6'. After that go to the 'gwl1.5\source' directory 
   and check the file 'Makefile.bcc' whether you need to make any changes. 
   You'll probably have to change the following variables accordingly to your 
   BCC50 and Argtable2 installations:
      CCPP = bcc32
      LINKER = ilink32
      LIBR = tlib
      ARGTABLEDIR = argtable2-6
   Finally type to recompile GWL:
      make -f Makefile.bcc

4. You can add the 'gwl1.5\bin' directory to your PATH variable to make 
   GWL executable from any location.


II. Basic Installation (Linux)
==============================

1. Unzip gwl1.5.zip into the folder "gwl1.5".

2. If you use Linux, you need to compile all C++ modules. You can do it 
   using g++ compiler. Before it, you need to download some external libraries:
   a) ANSI C command line parser Argtable2. We recommend using with GWL the 
      Argtable2 version 2.6, released February 12, 2006. Please download the 
      Argtable2 source code 'argtable2-6.tar.gz' from
         http://argtable.sourceforge.net
      to the directory 'gwl1.5/source' and unzip it to the directory 
      'gwl1.5/source/argtable2-6'.
   b) C subroutine library for computing the discrete Fourier transform FFTW.   
      We recommend using the version 3.1 of FFTW. Please download
      the file 'fftw-3.1.2.tar.gz' from 
         http://www.fftw.org/download.html
      save it in the directory 'gwl1.5/source' and unzip it to the directory 
      'gwl1.5/source/fftw-3.1.2'.
   c) A graphic extension to the Qt GUI application framework QWT. 
      We recommend using with GWL the version 5.0.1 of QWT. Please download
      the file 'qwt-5.0.1.zip' from 
         http://sourceforge.net/project/showfiles.php?group_id=13693
      save it to the directory 'gwl1.5/source' and unzip it to the directory 
      'gwl1.5/source/qwt-5.0.1'.

3. Go to the 'gwl1.5/source' directory and look through 'Makefile.gcc' to see 
   if you need to make any changes. You'll probably have to change the 
   following variables accordingly your libraries settings:
      ARGTABLEDIR = argtable2-6
      FFTW3DIR = fftw-3.1.2
      QWTDIR = qwt-5.0.1 

4. There are two different options to build GWL: without a graphical plotting 
   program and with this one. 
   a) Following the first way, go to 'gwl1.5/source' and type
         make -f Makefile.gcc shell
      After the compilation, a set of non-graphical executable modules 
      placed in 'gwl1.5/bin' directory is obtained.
   b) In the second case, the QT and QWT libraries are used. Make sure that 
      the environment variable QTDIR is defined and contains the directory 
      of a valid QT installation as well as that the directory QTDIR is 
      contained in the PATH:
      under bash: echo $QTDIR
                  echo $PATH
      under csh: echo ${QTDIR}
                 echo ${PATH}
      After this, go to 'gwl1.5/source' and type:           
         make -f Makefile.gcc qwtplot
      After the compilation, the graphical module 'gwlPlot' is created in 
      'gwl1.5/bin' directory. 

5. To be able to run the executables, please make sure that your 
   LD_LIBRARY_PATH contains the directories where libraries libargtable2, 
   libqt-mt and libqwt are stored:
      under bash: echo $LD_LIBRARY_PATH
      under csh: echo ${LD_LIBRARY_PATH}
   Libraries libqt-mt and libqwt are used only in the module gwlPlot whereas
   the library libargtable2 is used in all modules of GWL. If you already 
   defined LD_LIBRARY_PATH but do not have these libraries on the path, then 
   add the following environment variable to your .profile or .cshrc:
      setenv LD_LIBRARY_PATH gwl1.5/source/lib:$LD_LIBRARY_PATH
   To define LD_LIBRARY_PATH, add to your .profile or .cshrc:  
      setenv LD_LIBRARY_PATH gwl1.5/source/lib
   Go to 'gwl1.5/bin' directory and check that no dynamic library is missing:
      ldd gwlPlot
   
6. You'll want to add the 'gwl1.5/bin' directory to a your PATH variable to 
   make GWL easily usable. 

III. How to test GWL
==============================

Up to date no comprehensive test suite for GWL features has been written. 
However, a supplied demo files provide a good method for testing some features.

1. To perform a calculation using GWL, run certain modules from 'gwl1.5/bin' 
   directory in the appointed order. The calculation parameters have to be 
   given by the command line. The data exchange between different modules is 
   implemented by data files with binary stream formats. After the 
   calculation process is finished, a collection of ASCII or binary 
   files with calculation results is obtained. Some examples you can find here:
      gwl1.5/solutions/Examples/exmDelta (Linux)
   or
      gwl1.5/solutions/Examples/exmDelta.bat (MS-Windows)

2. In general, we can plot these calculation results saved in ASCII format 
   using any plotting software. For example, see 
      gwl1.5/solutions/Examples/exmDelta.plt 
   which is a script for GNUPLOT 4.0 that allows us to plot the calculated 
   wavelet spectrum after the calculation using exmDelta or exmDelta.bat is 
   finished.
   
3. To reduce the required space on hard drive and to improve the plotting 
   performance, we can also store the results as binary files. Toward this end, 
   we developed a special MATLAB package placed on interface level of GWL in 
   the directory 'gwl1.5/mshell'. This package allows us to read all binary 
   formats supported in GWL and plot GWL objects like a multi-channel signal 
   or a multi-channel wavelet spectrum using high-level subroutines based on 
   standard MATLAB plotting commands. This package is developed as a M-file 
   library and do not need to run any installation before using the program. 
   It was tested for Matlab 6.1.x release 12.1 (Win platform) and Matlab 6.5.x 
   release 13 (Linux platform). Some examples you can find here:
      gwl1.5/solutions/ElliProp3D/NorthernBavaria and
      gwl1.5/solutions/ElliProp3D/NorthernBavaria.m.

4. The second possibility to use the 'gwl1.5/mshell' library is an integration 
   of the calculation process with plotting subroutines using a M-file program. 
   To achieve this, some procedures were added into 'gwl1.5/mshell' for 
   directly execution of the modules from the GWL command line level. As 
   examples see all programs in the directory
      gwl1.5/solutions/Examples.

